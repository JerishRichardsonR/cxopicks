import Head from 'next/head'
import { useState } from 'react';
import Select from 'react-select';
import CreatableSelect from 'react-select/creatable';
import Toast from '../components/Toast/toast'

export default function Home() {
    const [profilePic, setProfilePic] = useState('');
    const [consultantName, setConsultantName] = useState('');
    const [bio, setBio] = useState('');
    const [costPerHour, setCostPerHour] = useState('');
    const [linkedinProflie, setLinkedinProflie] = useState('');
    const [website, setWebsite] = useState('');
    const [companyArray, setCompanyArray] = useState([{ companyName: '', jobTitle: '', jobPeriod:''}]);
    const [industryCertifications, setIndustryCertifications] = useState('');
    const [consultingLanguage, setConsultingLanguage] = useState('');
    const [submitted, setSubmitted] = useState(false);
    const [costOptions, setCostOptions] = useState(
        [
            { label: "$10" , value: "$10"}, { label: "$20" , value: "$20"},
            { label: "$30" , value: "$30"}, { label: "$40" , value: "$40"},
            { label: "$50" , value: "$50"}, { label: "$60" , value: "$60"}
        ]
    );
    const [languageOptions, setLanguageOptions] = useState(
        [
            { label: "English" , value: "English"}, { label: "Spanish" , value: "Spanish"},
            { label: "German" , value: "German"}, { label: "Chinese" , value: "Chinese"},
            { label: "French" , value: "French"}, { label: "Japanese" , value: "Japanese"}
        ]
    );
    const [yearOptions, setYearOptions] = useState(
        [
            { label: "Less than 1 year" , value: "Less than 1 year"}, { label: "1 Year" , value: "1 Year"},
            { label: "2 Years" , value: "2 Years"}, { label: "3 Years" , value: "3 Years"},
            { label: "4 Years" , value: "4 Years"}, { label: "5 Years" , value: "5 Years"}, 
            { label: "More than 5 years" , value: "More than 5 years"}
        ]
    );

    const onCancel = () => {
        setProfilePic('');
        setConsultantName('');
        setBio('');
        setCostPerHour('');
        setLinkedinProflie('');
        setWebsite('');
        setCompanyArray([{ companyName: '', jobTitle: '', jobPeriod:''}]);
        setIndustryCertifications('');
        setConsultingLanguage('');
        setSubmitted(false);
    }

    const changeCompanyValue = (index, name, value) => {
        const companies = [...companyArray];
        companies[index][name] = value;
        setCompanyArray(companies);

    }

    const onContinue = () => {
        setSubmitted(true);
        if (!profilePic || !consultantName || !bio || 
            !costPerHour || !linkedinProflie || !website || 
            !industryCertifications || industryCertifications.length == 0 || !consultingLanguage || consultingLanguage.length == 0) {
            return;
        } else {
            var count = 0;
            companyArray.forEach(element => {
                count += 1;
                if (!element.companyName || !element.jobTitle || !element.jobPeriod) {
                    return;
                }
                if (companyArray.length == count) {
                    onCancel();
                    Toast('success', "Submitted Successfully");
                }
            })
        }
    }

    return (
        <>
            <Head>
                <title>Cxopicks | Profile</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="page-wrapper">
                <div className="col-lg-12 col-md-12 col-12 p-0">
                    <h2 className="page_heading">Profile Details</h2>
                </div>
                <div className="grey_box_bg">
                    <h6 className="main-heading"><span className="fa fa-user-o mr-3"></span>Personal Information</h6>
                    <div className="content-wrapper">
                        <div className="card-body p-0 my-4">
                            <div className="mx-0 form_fields_grey_bg">
                                <div className="row m-0 bor_btm_span">
                                    <div className="upload_photo_bg col-5">
                                    {profilePic == '' ? 
                                        (
                                            <i className="fa fa-file-image-o fa-3x" aria-hidden="true"></i>
                                        ) : (
                                            <img
                                                src={profilePic}
                                                className=""
                                                alt="Profile Picture" 
                                                width="100" 
                                                height="100" 
                                            />
                                        )
                                    }
                                    </div>
                                    <div className="col-7 text-md-left">
                                        <span className="upload-profile-label">Upload Profile Pic</span>
                                        <span className="d-block to-choose-a-file">
                                            <input type="file" id="actual-btn" onChange={(e) => setProfilePic(URL.createObjectURL(e.target.files[0]))} hidden accept="image/*"/>
                                            <label htmlFor="actual-btn" className="blue_link">Click here</label>to choose a file<br/>
                                            {submitted && !profilePic && (
                                                <span id="email-error" className="text-danger" >Profile Pic is Required</span>
                                            )}
                                        </span>
                                    </div>                                        
                                </div>
                                <div className="row">
                                    <div className="form-group col-md-4">
                                        <label className="form-label">Consultant Name<span className="required-red">*</span></label>
                                        <input type="text" className={"form-control " + ((submitted && !consultantName) ? "is-invalid" : "")} name="consultantName" value={consultantName} placeholder="Type here" onChange={(e) => setConsultantName(e.target.value)} />
                                        {submitted && !consultantName && (
                                            <span id="email-error" className="error invalid-feedback" >Consultant Name is Required</span>
                                        )}
                                    </div>
                                </div>
                                <div className="row">
                                    <div className="form-group col-md-8">
                                        <label className="form-label">Bio<span className="required-red">*</span></label>
                                        <textarea className={"form-control " + ((submitted && !bio) ? "is-invalid" : "")} name="bio" value={bio} placeholder="Type here" onChange={(e) => setBio(e.target.value)} rows="8"></textarea>
                                        {submitted && !bio && (
                                            <span id="email-error" className="error invalid-feedback" >Bio is Required</span>
                                        )}
                                    </div>
                                </div>
                                <div className="row">
                                    <div className="form-group col-md-4">
                                        <label className="form-label">Cost per hour<span className="required-red">*</span></label>
                                        <Select
                                            className="basic-single-select"
                                            id="costPerHour"
                                            placeholder="Select here"
                                            isClearable
                                            isSearchable={true}
                                            classNamePrefix={"select_dropdown"}
                                            onChange={(selected) => {
                                                setCostPerHour(selected);
                                            }}
                                            value={costPerHour}
                                            options={costOptions}
                                        />
                                        {submitted && !costPerHour && (
                                            <span id="email-error" className="text-danger" >Cost per hour is Required</span>
                                        )}
                                    </div>
                                    <div className="form-group col-md-4">
                                        <label className="form-label">Linkedin Profile<span className="required-red">*</span></label>
                                        <input type="text" className={"form-control " + ((submitted && !linkedinProflie) ? "is-invalid" : "")} name="linkedinProflie" value={linkedinProflie} placeholder="Type here" onChange={(e) => setLinkedinProflie(e.target.value)}/>
                                        {submitted && !linkedinProflie && (
                                            <span id="email-error" className="error invalid-feedback" >Linkedin Profile is Required</span>
                                        )}
                                    </div>
                                    <div className="form-group col-md-4">
                                        <label className="form-label">Website<span className="required-red">*</span></label>
                                        <input type="text" className={"form-control " + ((submitted && !website) ? "is-invalid" : "")} name="website" value={website} placeholder="Type here" onChange={(e) => setWebsite(e.target.value)}/>
                                        {submitted && !website && (
                                            <span id="email-error" className="error invalid-feedback" >Website is Required</span>
                                        )}
                                    </div>
                                </div>
                                <div className="mt-5">
                                    <h6 className="main-heading"><span className="far fa-building mr-3"></span>Professional Information</h6>
                                    {companyArray && companyArray.length > 0 && companyArray.map((element, index) => (
                                        <div className="row" key={index}>
                                            <div className="form-group col-lg-4 col-md-4">
                                                <label className="form-label">Company Name<span className="required-red">*</span></label>
                                                <input type="text" className={"form-control " + ((submitted && !element.companyName) ? "is-invalid" : "")} name="companyName" value={element.companyName} placeholder="Type here" onChange={(e) => changeCompanyValue(index, e.target.name, e.target.value)}/>
                                                {submitted && !element.companyName && (
                                                    <span id="email-error" className="error invalid-feedback" >Company Name is Required</span>
                                                )}
                                            </div>
                                            <div className="form-group col-lg-3 col-md-4">
                                                <label className="form-label">Job Title<span className="required-red">*</span></label>
                                                <input type="text" className={"form-control " + ((submitted && !element.jobTitle) ? "is-invalid" : "")} name="jobTitle" value={element.jobTitle} placeholder="Type here" onChange={(e) => changeCompanyValue(index, e.target.name, e.target.value)}/>
                                                {submitted && !element.jobTitle && (
                                                    <span id="email-error" className="error invalid-feedback" >Job Title is Required</span>
                                                )}
                                            </div>
                                            <div className="form-group col-lg-3 col-md-4">
                                                <label className="form-label">Job Period<span className="required-red">*</span></label>
                                                <Select
                                                    className="basic-single-select"
                                                    id="jobPeriod"
                                                    placeholder="Add here"
                                                    isClearable
                                                    isSearchable={true}
                                                    classNamePrefix={"select_dropdown"}
                                                    onChange={(selected) => {
                                                        changeCompanyValue(index, "jobPeriod", selected)
                                                    }}
                                                    value={element.jobPeriod}
                                                    options={yearOptions}
                                                />
                                                {submitted && !element.jobPeriod && (
                                                    <span id="email-error" className="text-danger" >Job Period is Required</span>
                                                )}
                                            </div>
                                            {index == 0 ? 
                                                (
                                                    // companyArray.length != 5 &&
                                                    <div className="form-group col-lg-2 col-md-12 add-remove-btn">
                                                        <button 
                                                            className="blue-btn" 
                                                            onClick={() => {
                                                                if(companyArray.length > 4) {
                                                                    Toast('info', "Upto 5 Companies allowed")
                                                                } else {
                                                                    setCompanyArray([...companyArray, {companyName: '', jobTitle: '', jobPeriod:''}]);
                                                                }
                                                            }}
                                                        >
                                                            <span className="fa fa-plus-square"></span>{' '}Add More
                                                        </button>
                                                    </div>
                                                ) : (
                                                    <div className="form-group col-lg-2 col-md-12 add-remove-btn">
                                                        <button 
                                                            className="red-btn" 
                                                            onClick={() => {
                                                                const companies = [...companyArray];
                                                                companies.splice(index, 1);
                                                                setCompanyArray(companies);
                                                            }} 
                                                        >
                                                            <span className="fa fa-trash-o"></span>{' '}Remove
                                                        </button>
                                                    </div>
                                                )
                                            }
                                        </div>
                                    ))}
                                </div>
                                <div className="row">
                                    <div className="form-group col-md-4">
                                        <label className="form-label">Industry Certifications<span className="required-red">*</span></label>
                                        <CreatableSelect
                                            className="basic-single-select"
                                            id="industryCertifications"
                                            placeholder="Type here"
                                            isClearable
                                            isMulti
                                            classNamePrefix={"select_dropdown"}
                                            onChange={(selected) => {
                                                setIndustryCertifications(selected)
                                            }}
                                            value={industryCertifications}
                                            options={[]}
                                        />
                                        {((submitted && !industryCertifications) || (submitted && industryCertifications.length == 0)) && (
                                            <span id="email-error" className="text-danger" >Industry Certifications is Required</span>
                                        )}
                                    </div>
                                    <div className="form-group col-md-4">
                                        <label className="form-label">Consulting Language<span className="required-red">*</span></label>
                                        <Select
                                            className="basic-single-select"
                                            id="consultingLanguage"
                                            placeholder="Select here"
                                            isClearable
                                            isMulti
                                            isSearchable={true}
                                            classNamePrefix={"select_dropdown"}
                                            onChange={(selected) => {
                                                setConsultingLanguage(selected);
                                            }}
                                            value={consultingLanguage}
                                            options={languageOptions}
                                        />
                                        {((submitted && !consultingLanguage) || (submitted && consultingLanguage.length == 0)) && (
                                            <span id="email-error" className="text-danger" >Consulting Language is Required</span>
                                        )}
                                    </div>
                                </div>
                            </div>
                            <div className="col-12 buttons-group">
                                <button 
                                    onClick={onCancel} 
                                    className="grey_btn_bg mx-3"
                                >
                                    Cancel
                                </button>
                                <button 
                                    onClick={(e) => { 
                                        e.currentTarget.blur();
                                        onContinue();
                                    }} 
                                    className="yellow-btn"
                                >
                                    Continue
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </>
    )
}
